{"version":3,"sources":["components/ColorSelector.js","components/Text.js","components/Button.js","components/GameOver.js","components/Scoreboard.js","components/Settings.js","src/cell.js","src/grid.js","src/turn.js","src/game.js","components/Game.js","App.js"],"names":["currentColor","colors","disabled","onChange","size","style","props","View","tw","map","color","index","TouchableOpacity","accessibilityLabel","accessibilityRole","accessibilityState","selected","hitSlop","top","left","bottom","right","onPress","children","onRestart","Button","highScore","turns","score","currentTheme","darkMode","onChangeDarkMode","onChangeTheme","themes","useState","isOpen","setIsOpen","icon","faGear","Modal","animationType","transparent","visible","onRequestClose","faTimes","theme","ColorSelector","faCheckSquare","faSquare","Cell","options","this","x","y","Grid","cells","width","height","startingColor","Math","floor","random","length","undefined","totalTiles","find","cell","findIndex","newColor","oldColor","debug","console","log","tilesChanged","newTiles","changeCellColor","indexOf","push","getIndexAt","otherCell","traverseNewCell","Turn","Game","grid","columns","rows","generate","gameOver","lastColor","newScore","setColor","setDarkMode","setCells","setCurrentColor","setCurrentTheme","game","useRef","current","useEffect","restart","start","Settings","Scoreboard","GameOver","FlatList","data","getItemLayout","offset","initialNumToRender","numColumns","refreshing","removeClippedSubviews","renderItem","item","scrollEnabled","changeColor","App","useDeviceContext","withDeviceColorScheme","colorScheme","useColorScheme","useAppColorScheme","isDarkMode","StatusBar","darkModeEnabled"],"mappings":"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","file":"static/js/app.2436f5e8.chunk.js","sourcesContent":["import { TouchableOpacity, View } from 'react-native'\nimport tw from 'twrnc'\n\nexport default ({ currentColor, colors = [], disabled = false, onChange = () => { }, size = 'default', style = {} }, ...props) => {\n    return (\n        <View style={tw.style(`flex-row items-center justify-center p-4`, { 'web:min-h-36': size !== 'small' }, style)}>\n            {colors.map((color, index) =>\n                <TouchableOpacity\n                    key={color}\n                    accessibilityLabel={color}\n                    accessibilityRole='button'\n                    accessibilityState={{ disabled, selected: color === currentColor }}\n                    disabled={disabled}\n                    hitSlop={{\n                        top: 5,\n                        left: 5,\n                        bottom: 5,\n                        right: 5,\n                    }}\n                    style={tw.style(`h-12 w-12 bg-${color} mx-4`, { 'h-8 w-8 mx-1': size === 'small' }, { 'border-4 border-gray-500': currentColor == index })}\n                    onPress={color => color != currentColor && onChange(index, currentColor)}\n                    {...props}\n                />\n            )}\n        </View>\n    )\n}\n","import React from 'react'\nimport { Text as BaseText } from 'react-native'\nimport tw from 'twrnc'\n\nexport default ({ children, style, ...props }) => {\n    return (\n        <BaseText style={tw.style('text-gray-900 dark:text-gray-100', style)} {...props}>\n            {children}\n        </BaseText>\n    )\n}\n","import { TouchableOpacity } from 'react-native'\nimport Text from './Text'\nimport tw from 'twrnc'\n\nexport default ({ children, onPress, style = {} }, ...props) => {\n    return (\n        <TouchableOpacity onPress={onPress} {...props}>\n            <Text style={tw.style(`text-lg text-center`, style)}>\n                {children}\n            </Text>\n        </TouchableOpacity>\n    )\n}\n","import tw from 'twrnc'\nimport Button from './Button'\nimport Text from './Text'\n\nexport default ({ onRestart }) => {\n    return (\n        <>\n            <Text style={tw`font-bold uppercase text-center text-lg text-red-700 dark:text-red-400 mb-4`}>\n                Game Over\n            </Text>\n\n            <Button onPress={onRestart} style={tw`bg-red-300 dark:bg-red-700 mx-auto p-2 mb-4`}>New Game</Button>\n        </>\n    )\n}\n","import { View } from 'react-native'\nimport tw from 'twrnc'\nimport Text from './Text'\n\nexport default ({ highScore, score, turns }) => {\n    return (\n        <View style={tw`flex-row items-center justify-between web:min-h-36 py-4`}>\n            <Text style={tw`flex-1`} />\n\n            <View style={tw`flex-1 items-center`}>\n                <Text style={tw`text-3xl uppercase mb-2`}>Turns</Text>\n\n                <Text style={tw`text-5xl font-bold`}>{turns}</Text>\n            </View>\n\n            <View style={tw`flex-1 items-center justify-center`}>\n                {highScore ?\n                    <>\n                        <Text style={tw`text-lg uppercase mb-1`}>Best</Text>\n\n                        <Text style={tw`text-2xl font-bold`}>{highScore}</Text>\n                    </>\n                    : null\n                }\n            </View>\n        </View>\n    )\n}\n","import { Modal, TouchableOpacity, View } from 'react-native'\nimport { SafeAreaProvider, SafeAreaView } from 'react-native-safe-area-context'\nimport { useState } from 'react'\nimport { FontAwesomeIcon } from '@fortawesome/react-native-fontawesome'\nimport { faCheckSquare } from '@fortawesome/free-solid-svg-icons/faCheckSquare'\nimport { faGear } from '@fortawesome/free-solid-svg-icons/faGear'\nimport { faSquare } from '@fortawesome/free-solid-svg-icons/faSquare'\nimport { faTimes } from '@fortawesome/free-solid-svg-icons/faTimes'\nimport tw from 'twrnc'\nimport ColorSelector from './ColorSelector'\nimport Text from './Text'\n\nexport default ({ currentTheme, darkMode, onChangeDarkMode = () => { }, onChangeTheme = () => { }, themes }) => {\n    const [isOpen, setIsOpen] = useState(false)\n\n    return (\n        <View style={tw`items-end mt-2`}>\n            <TouchableOpacity\n                hitSlop={{\n                    top: 10,\n                    left: 10,\n                    bottom: 10,\n                    right: 10,\n                }}\n                style={tw`relative overflow-hidden mx-4 h-8 w-8`}\n                onPress={() => setIsOpen(true)}\n            >\n                <FontAwesomeIcon icon={faGear} size={30} style={tw`dark:text-gray-100`} />\n            </TouchableOpacity>\n\n            <Modal\n                animationType=\"slide\"\n                transparent={false}\n                visible={isOpen}\n                onRequestClose={() => {\n                    setIsOpen(!isOpen)\n                }}\n            >\n                <SafeAreaProvider>\n                    <SafeAreaView style={tw`flex-1 bg-white dark:bg-black`}>\n                        <View style={tw`w-full h-full max-w-3xl mx-auto px-4 py-2`}>\n                            <TouchableOpacity style={tw`self-end`} onPress={() => setIsOpen(false)}>\n                                <FontAwesomeIcon icon={faTimes} size={34} style={tw`dark:text-gray-100`} />\n                            </TouchableOpacity>\n\n                            <View style={tw`my-2`}>\n                                <Text style={tw`text-3xl my-1`}>Theme</Text>\n\n                                {themes.map((theme, index) => (\n                                    <ColorSelector\n                                        key={index}\n                                        colors={theme}\n                                        size='small'\n                                        style={tw`${currentTheme === index ? 'border-2 border-gray-300 dark:border-gray-600' : ''}`}\n                                        onChange={onChangeTheme}\n                                    />\n                                ))}\n                            </View>\n\n                            <View style={tw`flex-row items-center justify-between mt-4`}>\n                                <Text style={tw`text-3xl my-1`}>Dark Mode</Text>\n\n                                <TouchableOpacity onPress={() => onChangeDarkMode(!darkMode)}>\n                                    <FontAwesomeIcon\n                                        icon={darkMode ? faCheckSquare : faSquare}\n                                        size={34}\n                                        style={tw`text-gray-300 dark:text-gray-100`}\n                                    />\n                                </TouchableOpacity>\n                            </View>\n                        </View>\n                    </SafeAreaView>\n                </SafeAreaProvider>\n            </Modal>\n        </View>\n    )\n}\n","class Cell {\n    constructor(options) {\n        this.x = options.x\n        this.y = options.y\n        this.color = options.color\n    }\n\n    changeColor(color) {\n        this.color = color\n    }\n}\n\nexport default Cell\n","import Cell from './cell'\n\nclass Grid {\n    constructor(options) {\n        this.options = options\n    }\n\n    generate() {\n        const colors = this.options.colors || [\n            'red-500',\n            'green-500',\n            'blue-500',\n            'purple-500',\n        ]\n        this.cells = []\n        const width = this.options.width || 4\n        const height = this.options.height || 4\n        const startingColor = this.options.startingColor\n\n        let index = 0\n        for (let y = 0; y < height; y++) {\n            for (let x = 0; x < width; x++) {\n                let color = Math.floor(Math.random() * colors.length)\n                this.cells[index] = new Cell({ x, y, color })\n                index++\n            }\n        }\n\n        if (startingColor != undefined) {\n            this.cells[0] = new Cell({ x: 0, y: 0, color: startingColor })\n        }\n\n        this.totalTiles = index\n\n        return this.cells\n    }\n\n    getCellAt(x, y) {\n        return this.cells.find((cell) => cell.x == x && cell.y == y)\n    }\n\n    getIndexAt(x, y) {\n        return this.cells.findIndex((cell) => cell.x == x && cell.y == y)\n    }\n\n    setColor(newColor) {\n        // @TODO: keep track of high score; bonuses for changing many cells in any given turn\n        // higher multiplier for big changes at once\n        const oldColor = this.cells[0]?.color\n\n        this.options.debug && console.log(`player changed color from ${oldColor} to ${newColor}`)\n\n        this.tilesChanged = []\n        this.newTiles = []\n        if (oldColor != newColor) {\n            this.changeCellColor(0, oldColor, newColor)\n        }\n\n        return this.tilesChanged.length\n    }\n\n    changeCellColor(index, oldColor, newColor) {\n        let cell = this.cells[index]\n        if (cell.color !== oldColor || this.tilesChanged.indexOf(index) !== -1) {\n            return\n        }\n\n        this.options.debug && console.log('Setting cell at ' + cell.x + ',' + cell.y + ' to ' + newColor)\n\n        if (cell.color === oldColor) {\n            cell.color = newColor\n            this.tilesChanged.push(index)\n        }\n\n        if (cell.x > 0) {\n            index = this.getIndexAt(cell.x - 1, cell.y)\n            let otherCell = this.cells[index]\n\n            if (otherCell && otherCell.color === oldColor) {\n                this.changeCellColor(index, oldColor, newColor)\n            } else if (otherCell && otherCell.color === newColor) {\n                this.traverseNewCell(index)\n            }\n        }\n\n        if (cell.x < this.options.width - 1) {\n            index = this.getIndexAt(cell.x + 1, cell.y)\n            let otherCell = this.cells[index]\n\n            if (otherCell && otherCell.color === oldColor) {\n                this.changeCellColor(index, oldColor, newColor)\n            } else if (otherCell && otherCell.color === newColor) {\n                this.traverseNewCell(index)\n            }\n        }\n\n        if (cell.y > 0) {\n            index = this.getIndexAt(cell.x, cell.y - 1)\n            let otherCell = this.cells[index]\n\n            if (otherCell && otherCell.color === oldColor) {\n                this.changeCellColor(index, oldColor, newColor)\n            } else if (otherCell && otherCell.color === newColor) {\n                this.traverseNewCell(index)\n            }\n        }\n\n        if (cell.y < this.options.height - 1) {\n            index = this.getIndexAt(cell.x, cell.y + 1)\n            let otherCell = this.cells[index]\n\n            if (otherCell && otherCell.color === oldColor) {\n                this.changeCellColor(index, oldColor, newColor)\n            } else if (otherCell && otherCell.color === newColor) {\n                this.traverseNewCell(index)\n            }\n        }\n    }\n\n    traverseNewCell(index) {\n        if (this.newTiles.indexOf(index) !== -1\n            || this.tilesChanged.indexOf(index) !== -1) {\n            return\n        }\n\n        const cell = this.cells[index]\n        this.options.debug && console.log('Traversing new cell ' + cell.x + ',' + cell.y)\n        this.newTiles.push(index)\n\n        if (cell.x > 0) {\n            index = this.getIndexAt(cell.x - 1, cell.y)\n            let otherCell = this.cells[index]\n\n            if (otherCell && otherCell.color === cell.color) {\n                this.traverseNewCell(index)\n            }\n        }\n\n        if (cell.x < this.options.width - 1) {\n            index = this.getIndexAt(cell.x + 1, cell.y)\n            let otherCell = this.cells[index]\n\n            if (otherCell && otherCell.color === cell.color) {\n                this.traverseNewCell(index)\n            }\n        }\n\n        if (cell.y > 0) {\n            index = this.getIndexAt(cell.x, cell.y - 1)\n            let otherCell = this.cells[index]\n\n            if (otherCell && otherCell.color === cell.color) {\n                this.traverseNewCell(index)\n            }\n        }\n\n        if (cell.y < this.options.height - 1) {\n            index = this.getIndexAt(cell.x, cell.y + 1)\n            let otherCell = this.cells[index]\n\n            if (otherCell && otherCell.color === cell.color) {\n                this.traverseNewCell(index)\n            }\n        }\n    }\n}\n\nexport default Grid\n","class Turn {\n    constructor(oldColor, newColor, newTiles) {\n        this.oldColor = oldColor\n        this.newColor = newColor\n        this.newTiles = newTiles\n    }\n}\n\nexport default Turn\n","import Grid from './grid'\nimport Turn from './turn'\n\nclass Game {\n    constructor(options) {\n        this.options = options\n    }\n\n    start() {\n        this.turns = []\n        this.grid = new Grid({\n            startingColor: this.options.startingColor,\n            colors: this.options.colors,\n            width: this.options.columns || 4,\n            height: this.options.rows || 4,\n        })\n        this.grid.generate()\n        this.gameOver = false\n    }\n\n    changeColor(newColor) {\n        if (newColor == this.color) {\n            return\n        }\n\n        const lastColor = this.color\n        this.color = newColor\n\n        const newScore = this.grid.setColor(newColor)\n        this.turns.push(new Turn(lastColor, newColor, newScore))\n\n        if (newScore == this.options.columns * this.options.rows) {\n            this.gameOver = true\n\n            if (!this.highScore || this.turns.length < this.highScore) {\n                this.highScore = this.turns.length\n            }\n        }\n    }\n}\n\nexport default Game\n","import { useEffect, useRef, useState } from 'react'\nimport { FlatList, View } from 'react-native'\nimport ColorSelector from './ColorSelector'\nimport GameOver from './GameOver'\nimport Scoreboard from './Scoreboard'\nimport Settings from './Settings'\nimport Game from '../src/game'\nimport tw from 'twrnc'\n\nconst themes = [\n    [\n        'blue-400',\n        'green-400',\n        'red-400',\n        'purple-400',\n    ],\n    [\n        'rose-400',\n        'teal-400',\n        'amber-400',\n        'lime-400',\n    ],\n]\n\nconst columns = 11\nconst rows = 15\n\nexport default ({ darkMode, setDarkMode }) => {\n    const [cells, setCells] = useState([])\n    const [currentColor, setCurrentColor] = useState(0)\n    const [currentTheme, setCurrentTheme] = useState(0)\n    const game = useRef(new Game({\n        columns,\n        rows,\n        colors: themes[currentTheme],\n        startingColor: currentColor,\n    }))\n\n    const gameOver = game.current.gameOver\n    const highScore = game.current.highScore\n    const turns = game.current.turns?.length\n\n    useEffect(() => {\n        // start a new game when loading in\n        // @todo save/resume games\n        restart()\n    }, [])\n\n    const restart = () => {\n        game.current.start()\n        setCells(game.current.grid.cells)\n    }\n\n    const changeColor = (color, lastColor) => {\n        game.current.changeColor(color)\n        setCurrentColor(color)\n    }\n\n    const changeTheme = (theme) => {\n        setCurrentTheme((currentTheme + 1) % themes.length)\n    }\n\n    return (\n        <View style={tw`flex-1 w-full max-w-3xl mx-auto`}>\n            <Settings\n                currentTheme={currentTheme}\n                darkMode={darkMode}\n                onChangeDarkMode={setDarkMode}\n                onChangeTheme={changeTheme}\n                themes={themes}\n            />\n\n            <Scoreboard\n                highScore={highScore}\n                turns={turns}\n            />\n\n            {gameOver && <GameOver onRestart={restart} />}\n\n            <View style={tw`flex-grow items-center justify-center`}>\n                <FlatList\n                    data={cells}\n                    getItemLayout={(data, index) => (\n                        { length: 8 * 4, offset: 8 * 4 * index, index }\n                    )}\n                    initialNumToRender={cells.length}\n                    numColumns={columns}\n                    refreshing={!cells.length}\n                    removeClippedSubviews={false}\n                    renderItem={({ item }) => <View style={tw`h-8 w-8 bg-${themes[currentTheme][item.color]} border border-gray-100`} />}\n                    scrollEnabled={false}\n                />\n            </View>\n\n            {!gameOver && <ColorSelector\n                colors={themes[currentTheme]}\n                currentColor={currentColor}\n                disabled={gameOver}\n                onChange={(color, lastColor) => changeColor(color, lastColor)}\n            />}\n        </View>\n    )\n}\n","import { StatusBar } from 'expo-status-bar'\nimport { useEffect } from 'react'\nimport { View, useColorScheme } from 'react-native'\nimport { SafeAreaProvider, SafeAreaView } from 'react-native-safe-area-context'\nimport Game from './components/Game'\nimport tw, { useAppColorScheme, useDeviceContext } from 'twrnc'\n\nexport default function App() {\n  useDeviceContext(tw, { withDeviceColorScheme: false })\n  const colorScheme = useColorScheme()\n  const [darkMode, toggleDarkMode, setDarkMode] = useAppColorScheme(tw)\n\n  const isDarkMode = darkMode === 'dark'\n\n  useEffect(() => {\n    // sync our dark mode setting with the system setting\n    // @todo make this optional\n    setDarkMode(colorScheme)\n  }, [])\n\n  // dark mode styles aren't applied correctly on 1st render unless applied explicitly\n  return (\n    <View style={tw.style(`flex-1 bg-white dark:bg-black`, isDarkMode ? 'bg-black' : 'bg-white')}>\n      <SafeAreaProvider>\n        <SafeAreaView style={tw`flex-1`}>\n          <StatusBar style={isDarkMode ? 'light' : 'dark'} />\n\n          <Game\n            darkMode={isDarkMode}\n            setDarkMode={darkModeEnabled => setDarkMode(darkModeEnabled ? 'dark' : 'light')}\n          />\n        </SafeAreaView>\n      </SafeAreaProvider>\n    </View>\n  )\n}\n"],"sourceRoot":""}