{"version":3,"sources":["components/ColorSelector.js","components/Text.js","components/Button.js","components/GameOver.js","components/Modal.js","components/Menu.js","components/Scoreboard.js","components/Settings.js","src/cell.js","src/grid.js","src/turn.js","src/game.js","components/Game.js","App.js"],"names":["currentColor","colors","disabled","onChange","size","style","props","isDisabled","color","View","tw","map","index","TouchableOpacity","accessibilityLabel","accessibilityRole","accessibilityState","selected","hitSlop","top","left","bottom","right","onPress","children","onRestart","Button","open","onClose","Modal","animationType","transparent","visible","onRequestClose","icon","faTimes","gameMode","onChangeGameMode","useState","isOpen","setIsOpen","useEffect","faBars","currentPlayer","highScore","scores","turns","currentTheme","darkMode","onChangeDarkMode","onChangeTheme","themes","faGear","theme","ColorSelector","faCheckSquare","faSquare","Cell","options","this","x","y","Grid","cells","width","height","startingColor","Math","floor","random","length","undefined","totalTiles","find","cell","findIndex","newColor","player","cellIndex","oldColor","tilesChanged","newTiles","debug","console","log","changeCellColor","indexOf","push","getIndexAt","otherCell","traverseNewCell","Turn","Game","grid","columns","rows","generate","gameOver","Array","players","fill","getCellAt","colorIsTaken","lastColor","setColor","cornerIndex","setDarkMode","setCells","setCurrentColor","setCurrentPlayer","setCurrentTheme","setGameMode","game","useRef","current","restart","start","Menu","Settings","Scoreboard","GameOver","FlatList","data","getItemLayout","offset","initialNumToRender","numColumns","refreshing","removeClippedSubviews","renderItem","item","scrollEnabled","changeColor","nextPlayer","playerColor","App","useDeviceContext","withDeviceColorScheme","colorScheme","useColorScheme","useAppColorScheme","isDarkMode","StatusBar","darkModeEnabled"],"mappings":"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","file":"static/js/app.e6c4dcf1.chunk.js","sourcesContent":["import { TouchableOpacity, View } from 'react-native'\nimport tw from 'twrnc'\n\nexport default ({ currentColor, colors = [], disabled = false, onChange = () => { }, size = 'default', style = {} }, ...props) => {\n    const isDisabled = (color) => disabled || color == currentColor\n\n    return (\n        <View style={tw.style(`flex-row items-center justify-center p-4`, { 'web:min-h-36': size !== 'small' }, style)}>\n            {colors.map((color, index) =>\n                <TouchableOpacity\n                    key={color}\n                    accessibilityLabel={color}\n                    accessibilityRole='button'\n                    accessibilityState={{ disabled, selected: color === currentColor }}\n                    disabled={isDisabled(index)}\n                    hitSlop={{\n                        top: 5,\n                        left: 5,\n                        bottom: 5,\n                        right: 5,\n                    }}\n                    style={tw.style(`h-12 w-12 bg-${color} mx-4`, { 'h-8 w-8 mx-1': size === 'small' }, { 'border-4 border-gray-500': currentColor == index })}\n                    onPress={color => color != currentColor && onChange(index, currentColor)}\n                    {...props}\n                />\n            )}\n        </View>\n    )\n}\n","import React from 'react'\nimport { Text as BaseText } from 'react-native'\nimport tw from 'twrnc'\n\nexport default ({ children, style, ...props }) => {\n    return (\n        <BaseText style={tw.style('text-gray-900 dark:text-gray-100', style)} {...props}>\n            {children}\n        </BaseText>\n    )\n}\n","import { TouchableOpacity } from 'react-native'\nimport Text from './Text'\nimport tw from 'twrnc'\n\nexport default ({ children, onPress, style = {} }, ...props) => {\n    return (\n        <TouchableOpacity onPress={onPress} {...props}>\n            <Text style={tw.style(`text-lg text-center`, style)}>\n                {children}\n            </Text>\n        </TouchableOpacity>\n    )\n}\n","import tw from 'twrnc'\nimport Button from './Button'\nimport Text from './Text'\n\nexport default ({ onRestart }) => {\n    return (\n        <>\n            <Text style={tw`font-bold uppercase text-center text-lg text-red-700 dark:text-red-400 mb-4`}>\n                Game Over\n            </Text>\n\n            <Button onPress={onRestart} style={tw`bg-red-300 dark:bg-red-700 mx-auto p-2 mb-4`}>New Game</Button>\n        </>\n    )\n}\n","import { Modal, TouchableOpacity, View } from 'react-native'\nimport { SafeAreaProvider, SafeAreaView } from 'react-native-safe-area-context'\nimport { FontAwesomeIcon } from '@fortawesome/react-native-fontawesome'\nimport { faTimes } from '@fortawesome/free-solid-svg-icons/faTimes'\nimport tw from 'twrnc'\n\nexport default ({ children, open = false, onClose = () => { } }) => {\n    return (\n        <Modal\n            animationType=\"slide\"\n            transparent={false}\n            visible={open}\n            onRequestClose={onClose}\n        >\n            <SafeAreaProvider>\n                <SafeAreaView style={tw`flex-1 bg-white dark:bg-black`}>\n                    <View style={tw`w-full h-full max-w-3xl mx-auto px-4 py-2`}>\n                        <TouchableOpacity style={tw`self-end`} onPress={onClose}>\n                            <FontAwesomeIcon icon={faTimes} size={34} style={tw`dark:text-gray-100`} />\n                        </TouchableOpacity>\n\n                        {children}\n                    </View>\n                </SafeAreaView>\n            </SafeAreaProvider>\n        </Modal>\n    )\n}\n","import { TouchableOpacity, View } from 'react-native'\nimport { useEffect, useState } from 'react'\nimport { FontAwesomeIcon } from '@fortawesome/react-native-fontawesome'\nimport { faBars } from '@fortawesome/free-solid-svg-icons/faBars'\nimport tw from 'twrnc'\nimport Modal from './Modal'\nimport Text from './Text'\n\nexport default ({ gameMode, onChangeGameMode = () => { } }) => {\n    const [isOpen, setIsOpen] = useState(false)\n\n    useEffect(() => {\n        setIsOpen(false)\n    }, [gameMode])\n\n    return (\n        <View style={tw`items-end mt-2`}>\n            <TouchableOpacity\n                hitSlop={{\n                    top: 10,\n                    left: 10,\n                    bottom: 10,\n                    right: 10,\n                }}\n                style={tw`relative overflow-hidden mx-4 h-8 w-8`}\n                onPress={() => setIsOpen(true)}\n            >\n                <FontAwesomeIcon icon={faBars} size={30} style={tw`dark:text-gray-100`} />\n            </TouchableOpacity>\n\n            <Modal\n                open={isOpen}\n                onClose={() => setIsOpen(false)}\n            >\n                <View style={tw`flex-row flex-wrap mx-auto`}>\n                    <TouchableOpacity\n                        onPress={() => { onChangeGameMode(1) }}\n                        style={tw.style(`w-1/3 items-center border border-gray-300 rounded p-4 mr-4`, { 'bg-gray-300 dark:bg-gray-700': gameMode === 1 })}\n                    >\n                        <Text style={tw`text-3xl uppercase my-1`}>Solo</Text>\n                    </TouchableOpacity>\n\n                    <TouchableOpacity\n                        onPress={() => { onChangeGameMode(2) }}\n                        style={tw.style(`w-1/3 items-center border border-gray-300 rounded p-4 ml-4`, { 'bg-gray-300 dark:bg-gray-700': gameMode === 2 })}\n                    >\n                        <Text style={tw`text-3xl uppercase my-1`}>Duo</Text>\n                    </TouchableOpacity>\n                </View>\n            </Modal>\n        </View>\n    )\n}\n","import { View } from 'react-native'\nimport tw from 'twrnc'\nimport Text from './Text'\n\nexport default ({ currentPlayer, gameMode, highScore, scores, turns }) => {\n    return (\n        <View style={tw`flex-row items-center justify-between web:min-h-36 p-4`}>\n            {gameMode === 1\n                ? <>\n                    <Text style={tw`flex-1`} />\n\n                    <View style={tw`flex-1 items-center`}>\n                        <Text style={tw`text-3xl uppercase mb-2`}>Turns</Text>\n\n                        <Text style={tw`text-5xl font-bold`}>{turns}</Text>\n                    </View>\n\n                    <View style={tw`flex-1 items-center justify-center`}>\n                        {highScore ?\n                            <>\n                                <Text style={tw`text-lg uppercase mb-1`}>Best</Text>\n\n                                <Text style={tw`text-2xl font-bold`}>{highScore}</Text>\n                            </>\n                            : null\n                        }\n                    </View>\n                </>\n                :\n                <>\n                    <View style={tw.style(`flex-1 items-center justify-center`, { 'border-2 border-gray-500 dark:border-gray-300': currentPlayer == 0 })}>\n                        <Text style={tw`text-lg uppercase mb-1`}>Player 1</Text>\n\n                        <Text style={tw`text-2xl font-bold`}>{scores[0]}</Text>\n                    </View>\n\n                    <View style={tw.style(`flex-1 items-center justify-center`, { 'border-2 border-gray-500 dark:border-gray-300': currentPlayer == 1 })}>\n                        <Text style={tw`text-lg uppercase mb-1`}>Player 2</Text>\n\n                        <Text style={tw`text-2xl font-bold`}>{scores[1]}</Text>\n                    </View>\n                </>\n            }\n        </View>\n    )\n}\n","import { Modal, TouchableOpacity, View } from 'react-native'\nimport { SafeAreaProvider, SafeAreaView } from 'react-native-safe-area-context'\nimport { useState } from 'react'\nimport { FontAwesomeIcon } from '@fortawesome/react-native-fontawesome'\nimport { faCheckSquare } from '@fortawesome/free-solid-svg-icons/faCheckSquare'\nimport { faGear } from '@fortawesome/free-solid-svg-icons/faGear'\nimport { faSquare } from '@fortawesome/free-solid-svg-icons/faSquare'\nimport { faTimes } from '@fortawesome/free-solid-svg-icons/faTimes'\nimport tw from 'twrnc'\nimport ColorSelector from './ColorSelector'\nimport Text from './Text'\n\nexport default ({ currentTheme, darkMode, onChangeDarkMode = () => { }, onChangeTheme = () => { }, themes }) => {\n    const [isOpen, setIsOpen] = useState(false)\n\n    return (\n        <View style={tw`items-end mt-2`}>\n            <TouchableOpacity\n                hitSlop={{\n                    top: 10,\n                    left: 10,\n                    bottom: 10,\n                    right: 10,\n                }}\n                style={tw`relative overflow-hidden mx-4 h-8 w-8`}\n                onPress={() => setIsOpen(true)}\n            >\n                <FontAwesomeIcon icon={faGear} size={30} style={tw`dark:text-gray-100`} />\n            </TouchableOpacity>\n\n            <Modal\n                animationType=\"slide\"\n                transparent={false}\n                visible={isOpen}\n                onRequestClose={() => {\n                    setIsOpen(!isOpen)\n                }}\n            >\n                <SafeAreaProvider>\n                    <SafeAreaView style={tw`flex-1 bg-white dark:bg-black`}>\n                        <View style={tw`w-full h-full max-w-3xl mx-auto px-4 py-2`}>\n                            <TouchableOpacity style={tw`self-end`} onPress={() => setIsOpen(false)}>\n                                <FontAwesomeIcon icon={faTimes} size={34} style={tw`dark:text-gray-100`} />\n                            </TouchableOpacity>\n\n                            <View style={tw`my-2`}>\n                                <Text style={tw`text-3xl my-1`}>Theme</Text>\n\n                                {themes.map((theme, index) => (\n                                    <ColorSelector\n                                        key={index}\n                                        colors={theme}\n                                        size='small'\n                                        style={tw`${currentTheme === index ? 'border-2 border-gray-300 dark:border-gray-600' : ''}`}\n                                        onChange={onChangeTheme}\n                                    />\n                                ))}\n                            </View>\n\n                            <View style={tw`flex-row items-center justify-between mt-4`}>\n                                <Text style={tw`text-3xl my-1`}>Dark Mode</Text>\n\n                                <TouchableOpacity onPress={() => onChangeDarkMode(!darkMode)}>\n                                    <FontAwesomeIcon\n                                        icon={darkMode ? faCheckSquare : faSquare}\n                                        size={34}\n                                        style={tw`text-gray-300 dark:text-gray-100`}\n                                    />\n                                </TouchableOpacity>\n                            </View>\n                        </View>\n                    </SafeAreaView>\n                </SafeAreaProvider>\n            </Modal>\n        </View>\n    )\n}\n","class Cell {\n    constructor(options) {\n        this.x = options.x\n        this.y = options.y\n        this.color = options.color\n    }\n\n    changeColor(color) {\n        this.color = color\n    }\n}\n\nexport default Cell\n","import Cell from './cell'\n\nclass Grid {\n    constructor(options) {\n        this.options = options\n    }\n\n    generate() {\n        const colors = this.options.colors || [\n            'red-500',\n            'green-500',\n            'blue-500',\n            'purple-500',\n        ]\n        this.cells = []\n        const width = this.options.width || 4\n        const height = this.options.height || 4\n        const startingColor = this.options.startingColor\n\n        let index = 0\n        for (let y = 0; y < height; y++) {\n            for (let x = 0; x < width; x++) {\n                let color = Math.floor(Math.random() * colors.length)\n                this.cells[index] = new Cell({ x, y, color })\n                index++\n            }\n        }\n\n        if (startingColor != undefined) {\n            this.cells[0] = new Cell({ x: 0, y: 0, color: startingColor })\n        }\n\n        this.totalTiles = index\n\n        return this.cells\n    }\n\n    getCellAt(x, y) {\n        return this.cells.find((cell) => cell.x == x && cell.y == y)\n    }\n\n    getIndexAt(x, y) {\n        return this.cells.findIndex((cell) => cell.x == x && cell.y == y)\n    }\n\n    setColor(newColor, player) {\n        // @TODO: bonuses/multiplier for changing many cells in any given turn\n        const cellIndex = player == 1 ? this.cells.length - 1 : 0\n        const oldColor = this.cells[cellIndex]?.color\n        this.tilesChanged = []\n        this.newTiles = []\n\n        this.options.debug && console.log(`player ${player} changed color from ${this.options.colors[oldColor]} to ${this.options.colors[newColor]}`, this.cells.length)\n\n        if (oldColor != newColor) {\n            this.changeCellColor(cellIndex, oldColor, newColor)\n        }\n\n        return this.tilesChanged.length\n    }\n\n    changeCellColor(index, oldColor, newColor) {\n        let cell = this.cells[index]\n        if (cell.color !== oldColor || this.tilesChanged.indexOf(index) !== -1) {\n            return\n        }\n\n        this.options.debug && console.log('Setting cell at ' + cell.x + ',' + cell.y + ' to ' + newColor)\n\n        if (cell.color === oldColor) {\n            cell.color = newColor\n            this.tilesChanged.push(index)\n        }\n\n        if (cell.x > 0) {\n            index = this.getIndexAt(cell.x - 1, cell.y)\n            let otherCell = this.cells[index]\n\n            if (otherCell.color === oldColor) {\n                this.changeCellColor(index, oldColor, newColor)\n            } else if (otherCell.color === newColor) {\n                this.traverseNewCell(index)\n            }\n        }\n\n        if (cell.x < this.options.width - 1) {\n            index = this.getIndexAt(cell.x + 1, cell.y)\n            let otherCell = this.cells[index]\n\n            if (otherCell.color === oldColor) {\n                this.changeCellColor(index, oldColor, newColor)\n            } else if (otherCell.color === newColor) {\n                this.traverseNewCell(index)\n            }\n        }\n\n        if (cell.y > 0) {\n            index = this.getIndexAt(cell.x, cell.y - 1)\n            let otherCell = this.cells[index]\n\n            if (otherCell.color === oldColor) {\n                this.changeCellColor(index, oldColor, newColor)\n            } else if (otherCell.color === newColor) {\n                this.traverseNewCell(index)\n            }\n        }\n\n        if (cell.y < this.options.height - 1) {\n            index = this.getIndexAt(cell.x, cell.y + 1)\n            let otherCell = this.cells[index]\n\n            if (otherCell.color === oldColor) {\n                this.changeCellColor(index, oldColor, newColor)\n            } else if (otherCell.color === newColor) {\n                this.traverseNewCell(index)\n            }\n        }\n    }\n\n    traverseNewCell(index) {\n        if (this.newTiles.indexOf(index) !== -1\n            || this.tilesChanged.indexOf(index) !== -1) {\n            return\n        }\n\n        const cell = this.cells[index]\n        this.options.debug && console.log('Traversing new cell ' + cell.x + ',' + cell.y)\n        this.newTiles.push(index)\n\n        if (cell.x > 0) {\n            index = this.getIndexAt(cell.x - 1, cell.y)\n            let otherCell = this.cells[index]\n\n            if (otherCell.color === cell.color) {\n                this.traverseNewCell(index)\n            }\n        }\n\n        if (cell.x < this.options.width - 1) {\n            index = this.getIndexAt(cell.x + 1, cell.y)\n            let otherCell = this.cells[index]\n\n            if (otherCell.color === cell.color) {\n                this.traverseNewCell(index)\n            }\n        }\n\n        if (cell.y > 0) {\n            index = this.getIndexAt(cell.x, cell.y - 1)\n            let otherCell = this.cells[index]\n\n            if (otherCell.color === cell.color) {\n                this.traverseNewCell(index)\n            }\n        }\n\n        if (cell.y < this.options.height - 1) {\n            index = this.getIndexAt(cell.x, cell.y + 1)\n            let otherCell = this.cells[index]\n\n            if (otherCell.color === cell.color) {\n                this.traverseNewCell(index)\n            }\n        }\n    }\n}\n\nexport default Grid\n","class Turn {\n    constructor(oldColor, newColor, newTiles, player) {\n        this.oldColor = oldColor\n        this.newColor = newColor\n        this.newTiles = newTiles\n        this.player = player\n    }\n}\n\nexport default Turn\n","import Grid from './grid'\nimport Turn from './turn'\n\nclass Game {\n    constructor(options) {\n        this.options = options\n    }\n\n    start() {\n        this.turns = []\n        this.color = this.options.startingColor\n        this.grid = new Grid({\n            startingColor: this.options.startingColor,\n            colors: this.options.colors,\n            width: this.options.columns || 4,\n            height: this.options.rows || 4,\n        })\n        this.grid.generate()\n        this.gameOver = false\n        this.scores = Array(this.options.players + 1 || 1).fill(0)\n    }\n\n    colorIsTaken(newColor) {\n        return newColor == this.color || (this.options?.players > 1 && (newColor == this.grid.getCellAt(0, 0).color || newColor == this.grid.getCellAt(this.options.columns - 1, this.options.rows - 1).color))\n    }\n\n    changeColor(newColor, player) {\n        if (this.colorIsTaken(newColor)) {\n            return\n        }\n\n        const lastColor = this.color\n        this.color = newColor\n\n        const tilesChanged = this.grid.setColor(newColor, player)\n        const newTiles = this.grid.newTiles.length || 0\n        this.turns.push(new Turn(lastColor, newColor, newTiles, player))\n        this.scores[player] = this.scores[player] + newTiles\n\n        if (tilesChanged + newTiles >= (this.options.columns * this.options.rows / this.options.players)) {\n            this.gameOver = true\n\n            if (!this.highScore || this.turns.length < this.highScore) {\n                this.highScore = this.turns.length\n            }\n        }\n\n        return newColor\n    }\n\n    playerColor(player) {\n        const cornerIndex = player == 1 ? this.grid.cells.length - 1 : 0\n\n        return this.grid.cells[cornerIndex]?.color\n    }\n}\n\nexport default Game\n","import { useEffect, useRef, useState } from 'react'\nimport { FlatList, View } from 'react-native'\nimport ColorSelector from './ColorSelector'\nimport GameOver from './GameOver'\nimport Menu from './Menu'\nimport Scoreboard from './Scoreboard'\nimport Settings from './Settings'\nimport Game from '../src/game'\nimport tw from 'twrnc'\n\nconst themes = [\n    [\n        'blue-400',\n        'green-400',\n        'red-400',\n        'purple-400',\n    ],\n    [\n        'rose-400',\n        'teal-400',\n        'amber-400',\n        'lime-400',\n    ],\n]\n\nconst columns = 11\nconst rows = 15\n\nexport default ({ darkMode, setDarkMode }) => {\n    const [cells, setCells] = useState([])\n    const [currentColor, setCurrentColor] = useState(0)\n    const [currentPlayer, setCurrentPlayer] = useState(0)\n    const [currentTheme, setCurrentTheme] = useState(0)\n    const [gameMode, setGameMode] = useState(1)\n    const game = useRef(new Game({\n        columns,\n        rows,\n        players: gameMode,\n        colors: themes[currentTheme],\n        startingColor: currentColor,\n    }))\n\n    const gameOver = game.current.gameOver\n    const highScore = game.current.highScore\n    const turns = game.current.turns?.length\n    const scores = game.current.scores\n\n    useEffect(() => {\n        // start a new game when loading in\n        // @todo save/resume games\n        restart()\n    }, [])\n\n    useEffect(() => {\n        restart()\n    }, [gameMode])\n\n    const restart = () => {\n        setCurrentColor(game.current.options.startingColor)\n        setCurrentPlayer(0)\n        game.current = new Game({\n            columns,\n            rows,\n            players: gameMode,\n            colors: themes[currentTheme],\n            startingColor: currentColor,\n        })\n        game.current.start()\n        setCells(game.current.grid.cells)\n    }\n\n    const changeColor = (color) => {\n        const newColor = game.current.changeColor(color, currentPlayer)\n        if (newColor === color) {\n            const nextPlayer = (currentPlayer + 1) % gameMode\n            setCurrentColor(game.current.playerColor(nextPlayer))\n            setCurrentPlayer(nextPlayer)\n        }\n    }\n\n    const changeTheme = (theme) => {\n        setCurrentTheme((currentTheme + 1) % themes.length)\n    }\n\n    return (\n        <View style={tw`flex-1 w-full max-w-3xl mx-auto`}>\n            <View style={tw`flex-row items-center justify-between`}>\n                <Menu\n                    gameMode={gameMode}\n                    onChangeGameMode={setGameMode}\n                />\n\n                <Settings\n                    currentTheme={currentTheme}\n                    darkMode={darkMode}\n                    onChangeDarkMode={setDarkMode}\n                    onChangeTheme={changeTheme}\n                    themes={themes}\n                />\n            </View>\n\n            <Scoreboard\n                currentPlayer={currentPlayer}\n                gameMode={gameMode}\n                highScore={highScore}\n                scores={scores}\n                turns={turns}\n            />\n\n            {gameOver && <GameOver onRestart={restart} />}\n\n            <View style={tw`flex-grow items-center justify-center`}>\n                <FlatList\n                    data={cells}\n                    getItemLayout={(data, index) => (\n                        { length: 8 * 4, offset: 8 * 4 * index, index }\n                    )}\n                    initialNumToRender={cells.length}\n                    numColumns={columns}\n                    refreshing={!cells.length}\n                    removeClippedSubviews={false}\n                    renderItem={({ item }) => <View style={tw`h-8 w-8 bg-${themes[currentTheme][item.color]} border border-gray-100`} />}\n                    scrollEnabled={false}\n                />\n            </View>\n\n            {!gameOver &&\n                <ColorSelector\n                    colors={themes[currentTheme]}\n                    currentColor={currentColor}\n                    currentPlayer={currentPlayer}\n                    disabled={gameOver}\n                    players={gameMode}\n                    onChange={changeColor}\n                />\n            }\n        </View>\n    )\n}\n","import { StatusBar } from 'expo-status-bar'\nimport { useEffect } from 'react'\nimport { View, useColorScheme } from 'react-native'\nimport { SafeAreaProvider, SafeAreaView } from 'react-native-safe-area-context'\nimport Game from './components/Game'\n// import useFirebase from './hooks/useFirebase'\nimport tw, { useAppColorScheme, useDeviceContext } from 'twrnc'\n\nexport default function App() {\n  // useFirebase()\n  useDeviceContext(tw, { withDeviceColorScheme: false })\n  const colorScheme = useColorScheme()\n  const [darkMode, toggleDarkMode, setDarkMode] = useAppColorScheme(tw)\n\n  const isDarkMode = darkMode === 'dark'\n\n  useEffect(() => {\n    // sync our dark mode setting with the system setting\n    // @todo make this optional\n    setDarkMode(colorScheme)\n  }, [])\n\n  // dark mode styles aren't applied correctly on 1st render unless applied explicitly\n  return (\n    <View style={tw.style(`flex-1 bg-white dark:bg-black`, isDarkMode ? 'bg-black' : 'bg-white')}>\n      <SafeAreaProvider>\n        <SafeAreaView style={tw`flex-1`}>\n          <StatusBar style={isDarkMode ? 'light' : 'dark'} />\n\n          <Game\n            darkMode={isDarkMode}\n            setDarkMode={darkModeEnabled => setDarkMode(darkModeEnabled ? 'dark' : 'light')}\n          />\n        </SafeAreaView>\n      </SafeAreaProvider>\n    </View>\n  )\n}\n"],"sourceRoot":""}