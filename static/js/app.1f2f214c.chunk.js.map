{"version":3,"sources":["components/ColorSelector.js","src/cell.js","src/grid.js","components/Grid.js","components/Text.js","components/Scoreboard.js","src/turn.js","components/Settings.js","components/Game.js","App.js"],"names":["currentColor","colors","disabled","onChange","size","style","View","tw","map","color","index","TouchableOpacity","accessibilityLabel","accessibilityRole","accessibilityState","selected","hitSlop","top","left","bottom","right","onPress","Cell","options","this","x","y","Grid","cells","width","height","Math","floor","random","length","undefined","startingColor","totalTiles","find","cell","findIndex","newColor","oldColor","debug","console","log","tilesChanged","newTiles","changeCellColor","indexOf","push","getIndexAt","otherCell","traverseNewCell","onScoreChange","useState","setCells","grid","setGrid","useEffect","generate","newScore","setColor","FlatList","data","getItemLayout","offset","initialNumToRender","numColumns","refreshing","removeClippedSubviews","renderItem","item","scrollEnabled","Text","children","props","score","turns","Turn","currentTheme","darkMode","onChangeDarkMode","onChangeTheme","themes","isOpen","setIsOpen","icon","faGear","Modal","animationType","transparent","visible","onRequestClose","faTimes","theme","ColorSelector","faCheckSquare","faSquare","setDarkMode","setCurrentColor","gameOver","setGameOver","lastColor","setLastColor","setScore","setTurns","setCurrentTheme","rows","Settings","Scoreboard","changeColor","App","useDeviceContext","withDeviceColorScheme","colorScheme","useColorScheme","useAppColorScheme","isDarkMode","StatusBar","Game","darkModeEnabled"],"mappings":"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","file":"static/js/app.1f2f214c.chunk.js","sourcesContent":["import { TouchableOpacity, View } from 'react-native'\nimport tw from 'twrnc'\n\nexport default ({ currentColor, colors = [], disabled = false, onChange = () => { }, size = 'default', style = {} }) => {\n    return (\n        <View style={tw.style(`flex-row items-center justify-center p-4`, { 'web:min-h-24': size !== 'small' }, style)}>\n            {colors.map((color, index) =>\n                <TouchableOpacity\n                    key={color}\n                    accessibilityLabel={color}\n                    accessibilityRole='button'\n                    accessibilityState={{ disabled, selected: color === currentColor }}\n                    disabled={disabled}\n                    hitSlop={{\n                        top: 5,\n                        left: 5,\n                        bottom: 5,\n                        right: 5,\n                    }}\n                    style={tw.style(`h-12 w-12 bg-${color} mx-4`, { 'h-8 w-8 mx-1': size === 'small' }, { 'border-4 border-gray-500': currentColor == index })}\n                    onPress={color => (color != currentColor) && onChange(index)}\n                />\n            )}\n        </View>\n    )\n}\n","class Cell {\n    constructor(options) {\n        this.x = options.x\n        this.y = options.y\n        this.color = options.color\n    }\n\n    changeColor(color) {\n        this.color = color\n    }\n}\n\nexport default Cell\n","import Cell from './cell'\n\nclass Grid {\n    constructor(options) {\n        this.options = options\n    }\n\n    generate() {\n        const colors = this.options.colors || [\n            'red-500',\n            'green-500',\n            'blue-500',\n            'purple-500',\n        ]\n        this.cells = []\n        const width = this.options.width || 4\n        const height = this.options.height || 4\n\n        let index = 0\n        for (let y = 0; y < height; y++) {\n            for (let x = 0; x < width; x++) {\n                let color = Math.floor(Math.random() * colors.length)\n                this.cells[index] = new Cell({ x, y, color })\n                index++\n            }\n        }\n\n        if (this.options.startingColor != undefined) {\n            this.cells[0] = new Cell({ x: 0, y: 0, color: this.options.startingColor })\n        }\n\n        this.totalTiles = index\n\n        return this.cells\n    }\n\n    getCellAt(x, y) {\n        return this.cells.find((cell) => cell.x == x && cell.y == y)\n    }\n\n    getIndexAt(x, y) {\n        return this.cells.findIndex((cell) => cell.x == x && cell.y == y)\n    }\n\n    setColor(newColor) {\n        // @TODO: keep track of high score; bonuses for changing many cells in any given turn\n        // higher multiplier for big changes at once\n        const oldColor = this.cells[0]?.color\n\n        this.options.debug && console.log(`player changed color from ${oldColor} to ${newColor}`)\n\n        this.tilesChanged = []\n        this.newTiles = []\n        if (oldColor != newColor) {\n            this.changeCellColor(0, oldColor, newColor)\n        }\n\n        return this.newTiles.length\n    }\n\n    changeCellColor(index, oldColor, newColor) {\n        let cell = this.cells[index]\n        if (cell.color !== oldColor || this.tilesChanged.indexOf(index) !== -1) {\n            return\n        }\n\n        this.options.debug && console.log('Setting cell at ' + cell.x + ',' + cell.y + ' to ' + newColor)\n\n        if (cell.color === oldColor) {\n            cell.color = newColor\n            this.tilesChanged.push(index)\n        }\n\n        if (cell.x > 0) {\n            index = this.getIndexAt(cell.x - 1, cell.y)\n            let otherCell = this.cells[index]\n\n            if (otherCell.color === oldColor) {\n                this.changeCellColor(index, oldColor, newColor)\n            } else if (otherCell.color === newColor) {\n                this.traverseNewCell(index)\n            }\n        }\n\n        if (cell.x < this.options.width - 1) {\n            index = this.getIndexAt(cell.x + 1, cell.y)\n            let otherCell = this.cells[index]\n\n            if (otherCell.color === oldColor) {\n                this.changeCellColor(index, oldColor, newColor)\n            } else if (otherCell.color === newColor) {\n                this.traverseNewCell(index)\n            }\n        }\n\n        if (cell.y > 0) {\n            index = this.getIndexAt(cell.x, cell.y - 1)\n            let otherCell = this.cells[index]\n\n            if (otherCell.color === oldColor) {\n                this.changeCellColor(index, oldColor, newColor)\n            } else if (otherCell.color === newColor) {\n                this.traverseNewCell(index)\n            }\n        }\n\n        if (cell.y < this.options.height - 1) {\n            index = this.getIndexAt(cell.x, cell.y + 1)\n            let otherCell = this.cells[index]\n\n            if (otherCell.color === oldColor) {\n                this.changeCellColor(index, oldColor, newColor)\n            } else if (otherCell.color === newColor) {\n                this.traverseNewCell(index)\n            }\n        }\n    }\n\n    traverseNewCell(index) {\n        if (this.newTiles.indexOf(index) !== -1\n            || this.tilesChanged.indexOf(index) !== -1) {\n            return\n        }\n\n        const cell = this.cells[index]\n        this.options.debug && console.log('Traversing new cell ' + cell.x + ',' + cell.y)\n        this.newTiles.push(index)\n\n        if (cell.x > 0) {\n            index = this.getIndexAt(cell.x - 1, cell.y)\n            let otherCell = this.cells[index]\n\n            if (otherCell.color === cell.color) {\n                this.traverseNewCell(index)\n            }\n        }\n\n        if (cell.x < this.options.width - 1) {\n            index = this.getIndexAt(cell.x + 1, cell.y)\n            let otherCell = this.cells[index]\n\n            if (otherCell.color === cell.color) {\n                this.traverseNewCell(index)\n            }\n        }\n\n        if (cell.y > 0) {\n            index = this.getIndexAt(cell.x, cell.y - 1)\n            let otherCell = this.cells[index]\n\n            if (otherCell.color === cell.color) {\n                this.traverseNewCell(index)\n            }\n        }\n\n        if (cell.y < this.options.height - 1) {\n            index = this.getIndexAt(cell.x, cell.y + 1)\n            let otherCell = this.cells[index]\n\n            if (otherCell.color === cell.color) {\n                this.traverseNewCell(index)\n            }\n        }\n    }\n}\n\nexport default Grid\n","import { useEffect, useState } from 'react'\nimport { FlatList, Text, View } from 'react-native'\nimport tw from 'twrnc'\nimport Grid from '../src/grid'\n\nexport default ({ width = 10, height = 15, colors = ['red-400', 'green-400', 'blue-400', 'purple-400'], currentColor, onScoreChange = () => { } }) => {\n    const [cells, setCells] = useState([])\n    const [grid, setGrid] = useState()\n\n\n    useEffect(() => {\n        const grid = new Grid({\n            startingColor: currentColor,\n            colors: colors,\n            width: width,\n            height: height,\n        })\n\n        setGrid(grid)\n\n        setCells(grid.generate())\n    }, [])\n\n    useEffect(() => {\n        if (grid) {\n            const newScore = grid.setColor(currentColor)\n\n            setCells(grid.cells)\n\n            onScoreChange(newScore)\n        }\n    }, [currentColor])\n\n    if (!cells.length) {\n        return <Text>GRID GOES HERE</Text>\n    }\n\n    return (\n        <View style={tw`flex-grow items-center justify-center`}>\n            <FlatList\n                data={cells}\n                getItemLayout={(data, index) => (\n                    { length: 8 * 4, offset: 8 * 4 * index, index }\n                )}\n                initialNumToRender={cells.length}\n                numColumns={width}\n                refreshing={!cells.length}\n                removeClippedSubviews={false}\n                renderItem={({ item }) =>\n                    <View\n                        style={tw`h-8 w-8 bg-${colors[item.color]} border border-gray-100`}\n                    />}\n                scrollEnabled={false}\n            />\n        </View>\n    )\n}\n","import React from 'react'\nimport { Text as BaseText } from 'react-native'\nimport tw from 'twrnc'\n\nexport default ({ children, style, ...props }) => {\n    return (\n        <BaseText style={tw.style('text-gray-900 dark:text-gray-100', style)} {...props}>\n            {children}\n        </BaseText>\n    )\n}\n","import { View } from 'react-native'\nimport tw from 'twrnc'\nimport Text from './Text'\n\nexport default ({ score, turns }) => {\n    return (\n        <View style={tw`flex-row items-center justify-between web:min-h-36 py-4`}>\n            <Text style={tw`flex-1`} />\n\n            <View style={tw`flex-1 items-center`}>\n                <Text style={tw`text-3xl uppercase mb-2`}>Score</Text>\n\n                <Text style={tw`text-5xl font-bold`}>{score}</Text>\n            </View>\n\n            <View style={tw`flex-1 items-center justify-center`}>\n                <Text style={tw`text-lg uppercase mb-1`}>Turns</Text>\n\n                <Text style={tw`text-2xl font-bold`}>{turns}</Text>\n            </View>\n        </View>\n    )\n}\n","class Turn {\n    constructor(oldColor, newColor, newTiles) {\n        this.oldColor = oldColor\n        this.newColor = newColor\n        this.newTiles = newTiles\n    }\n}\n\nexport default Turn\n","import { Modal, TouchableOpacity, View } from 'react-native'\nimport { SafeAreaProvider, SafeAreaView } from 'react-native-safe-area-context'\nimport { useState } from 'react'\nimport { FontAwesomeIcon } from '@fortawesome/react-native-fontawesome'\nimport { faCheckSquare } from '@fortawesome/free-solid-svg-icons/faCheckSquare'\nimport { faGear } from '@fortawesome/free-solid-svg-icons/faGear'\nimport { faSquare } from '@fortawesome/free-solid-svg-icons/faSquare'\nimport { faTimes } from '@fortawesome/free-solid-svg-icons/faTimes'\nimport tw from 'twrnc'\nimport ColorSelector from './ColorSelector'\nimport Text from './Text'\n\nexport default ({ currentTheme, darkMode, onChangeDarkMode = () => { }, onChangeTheme = () => { }, themes }) => {\n    const [isOpen, setIsOpen] = useState(false)\n\n    return (\n        <View style={tw`items-end mt-2`}>\n            <TouchableOpacity\n                hitSlop={{\n                    top: 10,\n                    left: 10,\n                    bottom: 10,\n                    right: 10,\n                }}\n                style={tw`relative overflow-hidden mx-4 h-8 w-8`}\n                onPress={() => setIsOpen(true)}\n            >\n                <FontAwesomeIcon icon={faGear} size={30} style={tw`dark:text-gray-100`} />\n            </TouchableOpacity>\n\n            <Modal\n                animationType=\"slide\"\n                transparent={false}\n                visible={isOpen}\n                onRequestClose={() => {\n                    setIsOpen(!isOpen)\n                }}\n            >\n                <SafeAreaProvider>\n                    <SafeAreaView style={tw`flex-1 bg-white dark:bg-black`}>\n                        <View style={tw`w-full h-full max-w-3xl mx-auto px-4 py-2`}>\n                            <TouchableOpacity style={tw`self-end`} onPress={() => setIsOpen(false)}>\n                                <FontAwesomeIcon icon={faTimes} size={34} style={tw`dark:text-gray-100`} />\n                            </TouchableOpacity>\n\n                            <View style={tw`my-2`}>\n                                <Text style={tw`text-3xl my-1`}>Theme</Text>\n\n                                {themes.map((theme, index) => (\n                                    <ColorSelector\n                                        key={index}\n                                        colors={theme}\n                                        size='small'\n                                        style={tw`${currentTheme === index ? 'border-2 border-gray-300 dark:border-gray-600' : ''}`}\n                                        onChange={onChangeTheme}\n                                    />\n                                ))}\n                            </View>\n\n                            <View style={tw`flex-row items-center justify-between mt-4`}>\n                                <Text style={tw`text-3xl my-1`}>Dark Mode</Text>\n\n                                <TouchableOpacity onPress={() => onChangeDarkMode(!darkMode)}>\n                                    <FontAwesomeIcon\n                                        icon={darkMode ? faCheckSquare : faSquare}\n                                        size={34}\n                                        style={tw`text-gray-300 dark:text-gray-100`}\n                                    />\n                                </TouchableOpacity>\n                            </View>\n                        </View>\n                    </SafeAreaView>\n                </SafeAreaProvider>\n            </Modal>\n        </View>\n    )\n}\n","import { useEffect, useState } from 'react'\nimport { View } from 'react-native'\nimport ColorSelector from './ColorSelector'\nimport Grid from './Grid'\nimport Scoreboard from './Scoreboard'\nimport Turn from '../src/turn'\nimport Settings from './Settings'\nimport Text from './Text'\nimport tw from 'twrnc'\n\nconst themes = [\n    [\n        'blue-400',\n        'green-400',\n        'red-400',\n        'purple-400',\n    ],\n    [\n        'rose-400',\n        'teal-400',\n        'amber-400',\n        'lime-400',\n    ],\n]\n\nexport default ({ darkMode, setDarkMode }) => {\n    const [currentColor, setCurrentColor] = useState(0)\n    const [gameOver, setGameOver] = useState(false)\n    const [lastColor, setLastColor] = useState()\n    const [score, setScore] = useState(0)\n    const [turns, setTurns] = useState([])\n    const [currentTheme, setCurrentTheme] = useState(0)\n\n    const columns = 11\n    const rows = 15\n\n    useEffect(() => {\n        if (turns.length && turns[0].tilesChanged + score === (rows * columns)) {\n            setGameOver(true)\n        }\n    }, [turns])\n\n    const changeColor = (color) => {\n        setLastColor(currentColor)\n        setCurrentColor(color)\n    }\n\n    const changeTheme = () => {\n        setCurrentTheme((currentTheme + 1) % themes.length)\n    }\n\n    const updateScore = (newScore) => {\n        turns.push(new Turn(lastColor, currentColor, newScore))\n        setTurns(turns)\n        setScore(score + newScore)\n\n\n    }\n\n    return (\n        <View style={tw`flex-1 w-full max-w-3xl mx-auto`}>\n            <Settings\n                currentTheme={currentTheme}\n                darkMode={darkMode}\n                onChangeDarkMode={setDarkMode}\n                onChangeTheme={changeTheme}\n                themes={themes}\n            />\n\n            <Scoreboard\n                score={score}\n                turns={turns.length}\n            />\n\n            {gameOver ? <Text>Game Over!</Text> : null}\n\n            <Grid\n                colors={themes[currentTheme]}\n                currentColor={currentColor}\n                height={rows}\n                width={columns}\n                onScoreChange={updateScore}\n            />\n\n            <ColorSelector\n                colors={themes[currentTheme]}\n                currentColor={currentColor}\n                disabled={gameOver}\n                onChange={color => changeColor(color)}\n            />\n        </View>\n    )\n}\n","import { StatusBar } from 'expo-status-bar'\nimport { useEffect } from 'react'\nimport { View, useColorScheme } from 'react-native'\nimport { SafeAreaProvider, SafeAreaView } from 'react-native-safe-area-context'\nimport Game from './components/Game'\nimport tw, { useAppColorScheme, useDeviceContext } from 'twrnc'\n\nexport default function App() {\n  useDeviceContext(tw, { withDeviceColorScheme: false })\n  const colorScheme = useColorScheme()\n  const [darkMode, toggleDarkMode, setDarkMode] = useAppColorScheme(tw)\n\n  const isDarkMode = darkMode === 'dark'\n\n  useEffect(() => {\n    // sync our dark mode setting with the system setting\n    // @todo make this optional\n    setDarkMode(colorScheme)\n  }, [])\n\n  // dark mode styles aren't applied correctly on 1st render unless applied explicitly\n  return (\n    <View style={tw.style(`flex-1 bg-white dark:bg-black`, isDarkMode ? 'bg-black' : 'bg-white')}>\n      <SafeAreaProvider>\n        <SafeAreaView style={tw`flex-1`}>\n          <StatusBar style={isDarkMode ? 'light' : 'dark'} />\n\n          <Game\n            darkMode={isDarkMode}\n            setDarkMode={darkModeEnabled => setDarkMode(darkModeEnabled ? 'dark' : 'light')}\n          />\n        </SafeAreaView>\n      </SafeAreaProvider>\n    </View>\n  )\n}\n"],"sourceRoot":""}